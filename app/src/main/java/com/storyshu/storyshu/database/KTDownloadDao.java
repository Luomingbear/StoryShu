package com.storyshu.storyshu.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KTDOWNLOAD".
*/
public class KTDownloadDao extends AbstractDao<KTDownload, Long> {

    public static final String TABLENAME = "KTDOWNLOAD";

    /**
     * Properties of entity KTDownload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Download_id = new Property(0, Long.class, "download_id", true, "_id");
        public final static Property DownloadUrl = new Property(1, String.class, "downloadUrl", false, "download_url");
        public final static Property SavePath = new Property(2, String.class, "savePath", false, "save_path");
        public final static Property DownloadSize = new Property(3, long.class, "downloadSize", false, "downloaded_size");
        public final static Property CurThread = new Property(4, int.class, "curThread", false, "cur_thread");
        public final static Property IsCompleted = new Property(5, boolean.class, "isCompleted", false, "is_completed");
    }


    public KTDownloadDao(DaoConfig config) {
        super(config);
    }
    
    public KTDownloadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KTDOWNLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: download_id
                "\"download_url\" TEXT," + // 1: downloadUrl
                "\"save_path\" TEXT," + // 2: savePath
                "\"downloaded_size\" INTEGER NOT NULL ," + // 3: downloadSize
                "\"cur_thread\" INTEGER NOT NULL ," + // 4: curThread
                "\"is_completed\" INTEGER NOT NULL );"); // 5: isCompleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KTDOWNLOAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KTDownload entity) {
        stmt.clearBindings();
 
        Long download_id = entity.getDownload_id();
        if (download_id != null) {
            stmt.bindLong(1, download_id);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(3, savePath);
        }
        stmt.bindLong(4, entity.getDownloadSize());
        stmt.bindLong(5, entity.getCurThread());
        stmt.bindLong(6, entity.getIsCompleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KTDownload entity) {
        stmt.clearBindings();
 
        Long download_id = entity.getDownload_id();
        if (download_id != null) {
            stmt.bindLong(1, download_id);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(2, downloadUrl);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(3, savePath);
        }
        stmt.bindLong(4, entity.getDownloadSize());
        stmt.bindLong(5, entity.getCurThread());
        stmt.bindLong(6, entity.getIsCompleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KTDownload readEntity(Cursor cursor, int offset) {
        KTDownload entity = new KTDownload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // download_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // savePath
            cursor.getLong(offset + 3), // downloadSize
            cursor.getInt(offset + 4), // curThread
            cursor.getShort(offset + 5) != 0 // isCompleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KTDownload entity, int offset) {
        entity.setDownload_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSavePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDownloadSize(cursor.getLong(offset + 3));
        entity.setCurThread(cursor.getInt(offset + 4));
        entity.setIsCompleted(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KTDownload entity, long rowId) {
        entity.setDownload_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KTDownload entity) {
        if(entity != null) {
            return entity.getDownload_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KTDownload entity) {
        return entity.getDownload_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
